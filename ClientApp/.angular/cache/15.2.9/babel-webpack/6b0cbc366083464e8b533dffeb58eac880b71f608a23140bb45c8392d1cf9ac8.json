{"ast":null,"code":"var _class;\nimport { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { apiGitHubDelete } from '../fn/git-hub/api-git-hub-delete';\nimport { apiGitHubFilePathGet } from '../fn/git-hub/api-git-hub-file-path-get';\nimport { apiGitHubGet$Json } from '../fn/git-hub/api-git-hub-get-json';\nimport { apiGitHubGet$Plain } from '../fn/git-hub/api-git-hub-get-plain';\nimport { apiGitHubPost$Json } from '../fn/git-hub/api-git-hub-post-json';\nimport { apiGitHubPost$Plain } from '../fn/git-hub/api-git-hub-post-plain';\nimport { apiGitHubTestGet } from '../fn/git-hub/api-git-hub-test-get';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class GitHubService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `apiGitHubTestGet()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubTestGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubTestGet$Response(params, context) {\n    return apiGitHubTestGet(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubTestGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubTestGet(params, context) {\n    return this.apiGitHubTestGet$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `apiGitHubGet()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubGet$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubGet$Plain$Response(params, context) {\n    return apiGitHubGet$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubGet$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubGet$Plain(params, context) {\n    return this.apiGitHubGet$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubGet$Json()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubGet$Json$Response(params, context) {\n    return apiGitHubGet$Json(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubGet$Json$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubGet$Json(params, context) {\n    return this.apiGitHubGet$Json$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `apiGitHubPost()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubPost$Plain()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  apiGitHubPost$Plain$Response(params, context) {\n    return apiGitHubPost$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubPost$Plain$Response()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  apiGitHubPost$Plain(params, context) {\n    return this.apiGitHubPost$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubPost$Json()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  apiGitHubPost$Json$Response(params, context) {\n    return apiGitHubPost$Json(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubPost$Json$Response()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  apiGitHubPost$Json(params, context) {\n    return this.apiGitHubPost$Json$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `apiGitHubDelete()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubDelete()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  apiGitHubDelete$Response(params, context) {\n    return apiGitHubDelete(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubDelete$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  apiGitHubDelete(params, context) {\n    return this.apiGitHubDelete$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `apiGitHubFilePathGet()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubFilePathGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubFilePathGet$Response(params, context) {\n    return apiGitHubFilePathGet(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubFilePathGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubFilePathGet(params, context) {\n    return this.apiGitHubFilePathGet$Response(params, context).pipe(map(r => r.body));\n  }\n}\n_class = GitHubService;\n_class.ApiGitHubTestGetPath = '/api/GitHub/Test';\n_class.ApiGitHubGetPath = '/api/GitHub';\n_class.ApiGitHubPostPath = '/api/GitHub';\n_class.ApiGitHubDeletePath = '/api/GitHub';\n_class.ApiGitHubFilePathGetPath = '/api/GitHub/{filePath}';\n_class.ɵfac = function GitHubService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","BaseService","apiGitHubDelete","apiGitHubFilePathGet","apiGitHubGet$Json","apiGitHubGet$Plain","apiGitHubPost$Json","apiGitHubPost$Plain","apiGitHubTestGet","GitHubService","constructor","config","http","apiGitHubTestGet$Response","params","context","rootUrl","pipe","r","body","apiGitHubGet$Plain$Response","apiGitHubGet$Json$Response","apiGitHubPost$Plain$Response","apiGitHubPost$Json$Response","apiGitHubDelete$Response","apiGitHubFilePathGet$Response","factory","providedIn"],"sourceRoot":"","sources":["/Users/delllin/Projects/Angular/FileSwap/ClientApp/src/app/api/services/git-hub.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { apiGitHubDelete } from '../fn/git-hub/api-git-hub-delete';\nimport { ApiGitHubDelete$Params } from '../fn/git-hub/api-git-hub-delete';\nimport { apiGitHubFilePathGet } from '../fn/git-hub/api-git-hub-file-path-get';\nimport { ApiGitHubFilePathGet$Params } from '../fn/git-hub/api-git-hub-file-path-get';\nimport { apiGitHubGet$Json } from '../fn/git-hub/api-git-hub-get-json';\nimport { ApiGitHubGet$Json$Params } from '../fn/git-hub/api-git-hub-get-json';\nimport { apiGitHubGet$Plain } from '../fn/git-hub/api-git-hub-get-plain';\nimport { ApiGitHubGet$Plain$Params } from '../fn/git-hub/api-git-hub-get-plain';\nimport { apiGitHubPost$Json } from '../fn/git-hub/api-git-hub-post-json';\nimport { ApiGitHubPost$Json$Params } from '../fn/git-hub/api-git-hub-post-json';\nimport { apiGitHubPost$Plain } from '../fn/git-hub/api-git-hub-post-plain';\nimport { ApiGitHubPost$Plain$Params } from '../fn/git-hub/api-git-hub-post-plain';\nimport { apiGitHubTestGet } from '../fn/git-hub/api-git-hub-test-get';\nimport { ApiGitHubTestGet$Params } from '../fn/git-hub/api-git-hub-test-get';\nimport { ContentViewModel } from '../models/content-view-model';\n\n@Injectable({ providedIn: 'root' })\nexport class GitHubService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `apiGitHubTestGet()` */\n  static readonly ApiGitHubTestGetPath = '/api/GitHub/Test';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubTestGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubTestGet$Response(params?: ApiGitHubTestGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return apiGitHubTestGet(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubTestGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubTestGet(params?: ApiGitHubTestGet$Params, context?: HttpContext): Observable<void> {\n    return this.apiGitHubTestGet$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n  /** Path part for operation `apiGitHubGet()` */\n  static readonly ApiGitHubGetPath = '/api/GitHub';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubGet$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubGet$Plain$Response(params?: ApiGitHubGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ContentViewModel>>> {\n    return apiGitHubGet$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubGet$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubGet$Plain(params?: ApiGitHubGet$Plain$Params, context?: HttpContext): Observable<Array<ContentViewModel>> {\n    return this.apiGitHubGet$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<ContentViewModel>>): Array<ContentViewModel> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubGet$Json()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubGet$Json$Response(params?: ApiGitHubGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ContentViewModel>>> {\n    return apiGitHubGet$Json(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubGet$Json$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubGet$Json(params?: ApiGitHubGet$Json$Params, context?: HttpContext): Observable<Array<ContentViewModel>> {\n    return this.apiGitHubGet$Json$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<ContentViewModel>>): Array<ContentViewModel> => r.body)\n    );\n  }\n\n  /** Path part for operation `apiGitHubPost()` */\n  static readonly ApiGitHubPostPath = '/api/GitHub';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubPost$Plain()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  apiGitHubPost$Plain$Response(params?: ApiGitHubPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ContentViewModel>> {\n    return apiGitHubPost$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubPost$Plain$Response()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  apiGitHubPost$Plain(params?: ApiGitHubPost$Plain$Params, context?: HttpContext): Observable<ContentViewModel> {\n    return this.apiGitHubPost$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<ContentViewModel>): ContentViewModel => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubPost$Json()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  apiGitHubPost$Json$Response(params?: ApiGitHubPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ContentViewModel>> {\n    return apiGitHubPost$Json(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubPost$Json$Response()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  apiGitHubPost$Json(params?: ApiGitHubPost$Json$Params, context?: HttpContext): Observable<ContentViewModel> {\n    return this.apiGitHubPost$Json$Response(params, context).pipe(\n      map((r: StrictHttpResponse<ContentViewModel>): ContentViewModel => r.body)\n    );\n  }\n\n  /** Path part for operation `apiGitHubDelete()` */\n  static readonly ApiGitHubDeletePath = '/api/GitHub';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubDelete()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  apiGitHubDelete$Response(params?: ApiGitHubDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return apiGitHubDelete(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubDelete$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  apiGitHubDelete(params?: ApiGitHubDelete$Params, context?: HttpContext): Observable<void> {\n    return this.apiGitHubDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n  /** Path part for operation `apiGitHubFilePathGet()` */\n  static readonly ApiGitHubFilePathGetPath = '/api/GitHub/{filePath}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGitHubFilePathGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubFilePathGet$Response(params: ApiGitHubFilePathGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return apiGitHubFilePathGet(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `apiGitHubFilePathGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGitHubFilePathGet(params: ApiGitHubFilePathGet$Params, context?: HttpContext): Observable<void> {\n    return this.apiGitHubFilePathGet$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
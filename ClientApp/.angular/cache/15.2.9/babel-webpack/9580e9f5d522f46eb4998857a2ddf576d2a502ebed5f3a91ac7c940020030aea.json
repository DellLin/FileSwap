{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { RequestBuilder } from '../../request-builder';\nexport function apiGitHubFilePathGet(http, rootUrl, params, context) {\n  const rb = new RequestBuilder(rootUrl, apiGitHubFilePathGet.PATH, 'get');\n  if (params) {\n    rb.path('filePath', params.filePath, {\n      \"style\": \"simple\"\n    });\n  }\n  return http.request(rb.build({\n    responseType: 'text',\n    accept: '*/*',\n    context\n  })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n    return r.clone({\n      body: undefined\n    });\n  }));\n}\napiGitHubFilePathGet.PATH = '/api/GitHub/{filePath}';","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAAkCA,YAAY,QAAQ,sBAAsB;AAE5E,SAASC,MAAM,EAAEC,GAAG,QAAQ,gBAAgB;AAE5C,SAASC,cAAc,QAAQ,uBAAuB;AAOtD,OAAM,SAAUC,oBAAoB,CAACC,IAAgB,EAAEC,OAAe,EAAEC,MAAmC,EAAEC,OAAqB;EAChI,MAAMC,EAAE,GAAG,IAAIN,cAAc,CAACG,OAAO,EAAEF,oBAAoB,CAACM,IAAI,EAAE,KAAK,CAAC;EACxE,IAAIH,MAAM,EAAE;IACVE,EAAE,CAACE,IAAI,CAAC,UAAU,EAAEJ,MAAM,CAACK,QAAQ,EAAE;MAAC,OAAO,EAAC;IAAQ,CAAC,CAAC;;EAG1D,OAAOP,IAAI,CAACQ,OAAO,CACjBJ,EAAE,CAACK,KAAK,CAAC;IAAEC,YAAY,EAAE,MAAM;IAAEC,MAAM,EAAE,KAAK;IAAER;EAAO,CAAE,CAAC,CAC3D,CAACS,IAAI,CACJhB,MAAM,CAAEiB,CAAM,IAA6BA,CAAC,YAAYlB,YAAY,CAAC,EACrEE,GAAG,CAAEgB,CAAoB,IAAI;IAC3B,OAAQA,CAAuB,CAACC,KAAK,CAAC;MAAEC,IAAI,EAAEC;IAAS,CAAE,CAA6B;EACxF,CAAC,CAAC,CACH;AACH;AAEAjB,oBAAoB,CAACM,IAAI,GAAG,wBAAwB","names":["HttpResponse","filter","map","RequestBuilder","apiGitHubFilePathGet","http","rootUrl","params","context","rb","PATH","path","filePath","request","build","responseType","accept","pipe","r","clone","body","undefined"],"sourceRoot":"","sources":["/Users/delllin/Projects/Angular/FileSwap/ClientApp/src/app/api/fn/git-hub/api-git-hub-file-path-get.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StrictHttpResponse } from '../../strict-http-response';\nimport { RequestBuilder } from '../../request-builder';\n\n\nexport interface ApiGitHubFilePathGet$Params {\n  filePath: string;\n}\n\nexport function apiGitHubFilePathGet(http: HttpClient, rootUrl: string, params: ApiGitHubFilePathGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n  const rb = new RequestBuilder(rootUrl, apiGitHubFilePathGet.PATH, 'get');\n  if (params) {\n    rb.path('filePath', params.filePath, {\"style\":\"simple\"});\n  }\n\n  return http.request(\n    rb.build({ responseType: 'text', accept: '*/*', context })\n  ).pipe(\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n    map((r: HttpResponse<any>) => {\n      return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n    })\n  );\n}\n\napiGitHubFilePathGet.PATH = '/api/GitHub/{filePath}';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _class;\nimport { inject } from '@angular/core';\nimport { GitHubService } from './api/services';\nimport { ConfirmationService, MessageService } from 'primeng/api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"primeng/treetable\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"primeng/button\";\nimport * as i5 from \"primeng/fileupload\";\nimport * as i6 from \"primeng/toast\";\nimport * as i7 from \"primeng/confirmpopup\";\nfunction AppComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"p-fileUpload\", 6, 7);\n    i0.ɵɵlistener(\"uploadHandler\", function AppComponent_ng_template_2_Template_p_fileUpload_uploadHandler_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const _r3 = i0.ɵɵreference(2);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.uploadFile($event, _r3));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"maxFileSize\", 100000000)(\"customUpload\", true)(\"auto\", true);\n  }\n}\nfunction AppComponent_ng_template_3_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const col_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", col_r8.header, \" \");\n  }\n}\nfunction AppComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, AppComponent_ng_template_3_th_1_Template, 2, 1, \"th\", 8);\n    i0.ɵɵelement(2, \"th\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const columns_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", columns_r6);\n  }\n}\nfunction AppComponent_ng_template_4_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵelement(1, \"p-treeTableToggler\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const col_r15 = ctx.$implicit;\n    const ctx_r17 = i0.ɵɵnextContext();\n    const rowNode_r9 = ctx_r17.$implicit;\n    const rowData_r10 = ctx_r17.rowData;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"rowNode\", rowNode_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", rowData_r10[col_r15.field], \" \");\n  }\n}\nfunction AppComponent_ng_template_4_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function AppComponent_ng_template_4_button_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const rowData_r10 = i0.ɵɵnextContext().rowData;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.downloadFile(rowData_r10));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_ng_template_4_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function AppComponent_ng_template_4_button_7_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const rowNode_r9 = i0.ɵɵnextContext().$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.onDleteClick($event, rowNode_r9));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, AppComponent_ng_template_4_td_1_Template, 3, 2, \"td\", 8);\n    i0.ɵɵelementStart(2, \"td\")(3, \"div\", 9)(4, \"div\", 10);\n    i0.ɵɵtemplate(5, AppComponent_ng_template_4_button_5_Template, 1, 0, \"button\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\");\n    i0.ɵɵtemplate(7, AppComponent_ng_template_4_button_7_Template, 1, 0, \"button\", 12);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const rowData_r10 = ctx.rowData;\n    const columns_r11 = ctx.columns;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", columns_r11);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", rowData_r10.type == \"file\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", rowData_r10.type == \"file\");\n  }\n}\nconst _c0 = function () {\n  return {\n    \"min-width\": \"50rem\"\n  };\n};\nexport class AppComponent {\n  constructor() {\n    this.contentTree = [];\n    this.loading = false;\n    this.CONTENT_COLUMN = [{\n      field: 'name',\n      header: 'Name'\n    }\n    // { field: 'path', header: 'Path' },\n    // { field: 'size', header: 'Size' },\n    // { field: 'type', header: 'Type' },\n    ];\n\n    this.gitHubService = inject(GitHubService);\n    this.messageService = inject(MessageService);\n    this.confirmationService = inject(ConfirmationService);\n  }\n  ngOnInit() {\n    this.gitHubService.apiGitHubGet$Json().subscribe({\n      next: data => {\n        data.sort((a, b) => a.contentType.value > b.contentType.value ? -1 : 1);\n        this.contentTree = this.contentListToTreeNodeList(data);\n      }\n    });\n  }\n  downloadFile(content) {\n    window.open('/api/GitHub/' + content.name);\n  }\n  uploadFile(event, fileUpload) {\n    console.log(event);\n    this.loading = true;\n    this.gitHubService.apiGitHubPost$Json({\n      body: {\n        file: event.files[0]\n      }\n    }).subscribe({\n      next: value => {\n        let findNode = this.contentTree.filter(f => {\n          return f.data.name + '.txt' == value.name;\n        });\n        if (findNode.length == 0) {\n          this.contentTree = [...this.contentTree, this.contentToTreeNode(value)];\n        }\n        fileUpload.clear();\n        this.loading = false;\n      },\n      error: () => {\n        this.messageService.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Upload fail.'\n        });\n        fileUpload.clear();\n        this.loading = false;\n      }\n    });\n  }\n  onDleteClick(event, treeNode) {\n    this.confirmationService.confirm({\n      target: event.target,\n      message: 'Are you sure that you want to delete?',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => {\n        this.deleteFile(treeNode);\n      }\n    });\n  }\n  deleteFile(treeNode) {\n    this.loading = true;\n    console.log(treeNode);\n    this.gitHubService.apiGitHubDelete({\n      body: treeNode.node.data\n    }).subscribe({\n      next: () => {\n        this.contentTree = this.contentTree.filter(f => {\n          return f != treeNode.node;\n        });\n        this.loading = false;\n      },\n      error: () => {\n        this.messageService.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Delete fail.'\n        });\n        this.loading = false;\n      }\n    });\n  }\n  contentListToTreeNodeList(contentList) {\n    let treeNodeList = [];\n    for (let content of contentList) {\n      treeNodeList.push(this.contentToTreeNode(content));\n    }\n    return treeNodeList;\n  }\n  contentToTreeNode(content) {\n    let contentChildren = [];\n    if (content.child !== null && content.child.length > 0) {\n      for (let c of content.child) {\n        contentChildren.push(this.contentToTreeNode(c));\n      }\n    }\n    return {\n      data: {\n        name: content.contentType?.value == 1 ? content.name : content.name?.substring(0, content.name.length - 4),\n        path: content.path,\n        sha: content.sha,\n        type: content.contentType?.stringValue\n      },\n      children: contentChildren\n    };\n  }\n}\n_class = AppComponent;\n_class.ɵfac = function AppComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-root\"]],\n  decls: 7,\n  vars: 8,\n  consts: [[1, \"card\"], [\"scrollHeight\", \"500px\", 3, \"value\", \"columns\", \"paginator\", \"rows\", \"scrollable\", \"tableStyle\", \"loading\"], [\"pTemplate\", \"caption\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [1, \"flex\", \"align-items-center\", \"justify-content-between\"], [\"mode\", \"basic\", \"chooseLabel\", \"Browse\", 3, \"maxFileSize\", \"customUpload\", \"auto\", \"uploadHandler\"], [\"fileUpload\", \"\"], [4, \"ngFor\", \"ngForOf\"], [1, \"flex\", \"justify-content-end\", \"flex-wrap\"], [1, \"\"], [\"pButton\", \"\", \"icon\", \"pi pi-download\", \"class\", \"mr-1\", 3, \"click\", 4, \"ngIf\"], [\"pButton\", \"\", \"icon\", \"pi pi-trash\", \"class\", \"mr-1 p-button-danger\", 3, \"click\", 4, \"ngIf\"], [3, \"rowNode\"], [\"pButton\", \"\", \"icon\", \"pi pi-download\", 1, \"mr-1\", 3, \"click\"], [\"pButton\", \"\", \"icon\", \"pi pi-trash\", 1, \"mr-1\", \"p-button-danger\", 3, \"click\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-treeTable\", 1);\n      i0.ɵɵtemplate(2, AppComponent_ng_template_2_Template, 3, 3, \"ng-template\", 2);\n      i0.ɵɵtemplate(3, AppComponent_ng_template_3_Template, 3, 1, \"ng-template\", 3);\n      i0.ɵɵtemplate(4, AppComponent_ng_template_4_Template, 8, 3, \"ng-template\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(5, \"p-toast\")(6, \"p-confirmPopup\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"value\", ctx.contentTree)(\"columns\", ctx.CONTENT_COLUMN)(\"paginator\", true)(\"rows\", 10)(\"scrollable\", true)(\"tableStyle\", i0.ɵɵpureFunction0(7, _c0))(\"loading\", ctx.loading);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.TreeTable, i3.PrimeTemplate, i2.TreeTableToggler, i4.ButtonDirective, i5.FileUpload, i6.Toast, i7.ConfirmPopup],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["inject","GitHubService","ConfirmationService","MessageService","i0","AppComponent","constructor","field","header","ngOnInit","gitHubService","apiGitHubGet$Json","subscribe","next","data","sort","a","b","contentType","value","contentTree","contentListToTreeNodeList","downloadFile","content","window","open","name","uploadFile","event","fileUpload","console","log","loading","apiGitHubPost$Json","body","file","files","findNode","filter","f","length","contentToTreeNode","clear","error","messageService","add","severity","summary","detail","onDleteClick","treeNode","confirmationService","confirm","target","message","icon","accept","deleteFile","apiGitHubDelete","node","contentList","treeNodeList","push","contentChildren","child","c","substring","path","sha","type","stringValue","children","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/delllin/Projects/Angular/FileSwap/ClientApp/src/app/app.component.ts","/Users/delllin/Projects/Angular/FileSwap/ClientApp/src/app/app.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, Injectable, OnInit, inject } from '@angular/core';\nimport { GitHubService } from './api/services';\nimport { ContentViewModel } from './api/models';\nimport { TreeTableModule } from 'primeng/treetable';\nimport { ConfirmationService, MessageService, TreeNode } from 'primeng/api';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  contentTree: TreeNode[] = [];\n  loading = false;\n  CONTENT_COLUMN = [\n    { field: 'name', header: 'Name' },\n    // { field: 'path', header: 'Path' },\n    // { field: 'size', header: 'Size' },\n    // { field: 'type', header: 'Type' },\n  ]\n  private gitHubService = inject(GitHubService);\n  private messageService = inject(MessageService);\n  private confirmationService = inject(ConfirmationService);\n  ngOnInit(): void {\n\n    this.gitHubService.apiGitHubGet$Json().subscribe({\n      next: (data) => {\n        data.sort((a, b) => (a.contentType!.value! > b.contentType!.value! ? -1 : 1));\n\n        this.contentTree = this.contentListToTreeNodeList(data);\n      }\n    });\n\n  }\n  downloadFile(content: ContentViewModel) {\n    window.open('/api/GitHub/' + content.name);\n  }\n  uploadFile(event: any, fileUpload: any) {\n    console.log(event);\n\n    this.loading = true;\n    this.gitHubService.apiGitHubPost$Json({\n      body: {\n        file: event.files[0]\n      }\n    }).subscribe({\n      next: (value) => {\n        let findNode = this.contentTree.filter(f => { return f.data.name + '.txt' == value.name });\n        if (findNode.length == 0) { this.contentTree = [...this.contentTree, this.contentToTreeNode(value)]; }\n        fileUpload.clear();\n        this.loading = false;\n      },\n      error: () => {\n        this.messageService.add({ severity: 'error', summary: 'Error', detail: 'Upload fail.' });\n        fileUpload.clear();\n        this.loading = false;\n      },\n    });\n  }\n  onDleteClick(event: Event, treeNode: any) {\n    this.confirmationService.confirm({\n      target: event.target as EventTarget,\n      message: 'Are you sure that you want to delete?',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => {\n        this.deleteFile(treeNode);\n      }\n    });\n  }\n\n  deleteFile(treeNode: any) {\n    this.loading = true;\n    console.log(treeNode);\n    this.gitHubService.apiGitHubDelete({ body: treeNode.node.data as ContentViewModel }).subscribe({\n      next: () => {\n        this.contentTree = this.contentTree.filter(f => { return f != treeNode.node });\n        this.loading = false;\n      },\n      error: () => {\n        this.messageService.add({ severity: 'error', summary: 'Error', detail: 'Delete fail.' });\n        this.loading = false;\n      },\n    });\n  }\n\n  private contentListToTreeNodeList(contentList: ContentViewModel[]): TreeNode[] {\n    let treeNodeList: TreeNode[] = [];\n    for (let content of contentList) {\n      treeNodeList.push(this.contentToTreeNode(content));\n    }\n    return treeNodeList;\n  }\n\n  private contentToTreeNode(content: ContentViewModel): TreeNode {\n    let contentChildren: TreeNode[] = [];\n\n    if (content.child !== null && content.child!.length > 0) {\n      for (let c of content.child!) {\n        contentChildren.push(this.contentToTreeNode(c));\n      }\n    }\n    return {\n      data: {\n        name: content.contentType?.value == 1 ? content.name : content.name?.substring(0, content.name.length - 4),\n        path: content.path,\n        sha: content.sha,\n        type: content.contentType?.stringValue,\n      },\n      children: contentChildren\n    };\n  }\n}\n","<div class=\"card\">\n  <p-treeTable [value]=\"contentTree\" [columns]=\"CONTENT_COLUMN\" [paginator]=\"true\" [rows]=\"10\" [scrollable]=\"true\"\n    [tableStyle]=\"{'min-width':'50rem'}\" [loading]=\"loading\" scrollHeight=\"500px\">\n    <ng-template pTemplate=\"caption\">\n      <div class=\"flex align-items-center justify-content-between\">\n        <p-fileUpload #fileUpload mode=\"basic\" [maxFileSize]=\"100000000\" [customUpload]=\"true\"\n          (uploadHandler)=\"uploadFile($event, fileUpload)\" [auto]=\"true\" chooseLabel=\"Browse\"></p-fileUpload>\n      </div>\n    </ng-template>\n    <ng-template pTemplate=\"header\" let-columns>\n      <tr>\n        <th *ngFor=\"let col of columns\">\n          {{ col.header }}\n        </th>\n        <th></th>\n      </tr>\n    </ng-template>\n    <ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\" let-columns=\"columns\">\n      <tr>\n        <td *ngFor=\"let col of columns; let i = index\">\n          <p-treeTableToggler [rowNode]=\"rowNode\"></p-treeTableToggler>\n\n          {{ rowData[col.field] }}\n        </td>\n        <td>\n          <div class=\"flex justify-content-end flex-wrap\">\n            <div class=\"\">\n              <button pButton *ngIf=\"rowData.type == 'file'\" icon=\"pi pi-download\" (click)=\"downloadFile(rowData)\"\n                class=\"mr-1\"></button>\n            </div>\n            <div>\n              <button pButton *ngIf=\"rowData.type == 'file'\" icon=\"pi pi-trash\" (click)=\"onDleteClick($event, rowNode)\"\n                class=\"mr-1 p-button-danger\"></button>\n            </div>\n          </div>\n        </td>\n      </tr>\n    </ng-template>\n  </p-treeTable>\n</div>\n\n\n<p-toast></p-toast>\n<p-confirmPopup></p-confirmPopup>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
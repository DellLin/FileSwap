{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { apiGitHubDelete } from '../fn/git-hub/api-git-hub-delete';\nimport { apiGitHubFilePathGet } from '../fn/git-hub/api-git-hub-file-path-get';\nimport { apiGitHubGet$Json } from '../fn/git-hub/api-git-hub-get-json';\nimport { apiGitHubGet$Plain } from '../fn/git-hub/api-git-hub-get-plain';\nimport { apiGitHubPost$Json } from '../fn/git-hub/api-git-hub-post-json';\nimport { apiGitHubPost$Plain } from '../fn/git-hub/api-git-hub-post-plain';\nimport { apiGitHubTestGet } from '../fn/git-hub/api-git-hub-test-get';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport let GitHubService = /*#__PURE__*/(() => {\n  var _class;\n  class GitHubService extends BaseService {\n    constructor(config, http) {\n      super(config, http);\n    }\n    /** Path part for operation `apiGitHubTestGet()` */\n\n    /**\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\n     * To access only the response body, use `apiGitHubTestGet()` instead.\n     *\n     * This method doesn't expect any request body.\n     */\n    apiGitHubTestGet$Response(params, context) {\n      return apiGitHubTestGet(this.http, this.rootUrl, params, context);\n    }\n    /**\n     * This method provides access only to the response body.\n     * To access the full response (for headers, for example), `apiGitHubTestGet$Response()` instead.\n     *\n     * This method doesn't expect any request body.\n     */\n    apiGitHubTestGet(params, context) {\n      return this.apiGitHubTestGet$Response(params, context).pipe(map(r => r.body));\n    }\n    /** Path part for operation `apiGitHubGet()` */\n\n    /**\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\n     * To access only the response body, use `apiGitHubGet$Plain()` instead.\n     *\n     * This method doesn't expect any request body.\n     */\n    apiGitHubGet$Plain$Response(params, context) {\n      return apiGitHubGet$Plain(this.http, this.rootUrl, params, context);\n    }\n    /**\n     * This method provides access only to the response body.\n     * To access the full response (for headers, for example), `apiGitHubGet$Plain$Response()` instead.\n     *\n     * This method doesn't expect any request body.\n     */\n    apiGitHubGet$Plain(params, context) {\n      return this.apiGitHubGet$Plain$Response(params, context).pipe(map(r => r.body));\n    }\n    /**\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\n     * To access only the response body, use `apiGitHubGet$Json()` instead.\n     *\n     * This method doesn't expect any request body.\n     */\n    apiGitHubGet$Json$Response(params, context) {\n      return apiGitHubGet$Json(this.http, this.rootUrl, params, context);\n    }\n    /**\n     * This method provides access only to the response body.\n     * To access the full response (for headers, for example), `apiGitHubGet$Json$Response()` instead.\n     *\n     * This method doesn't expect any request body.\n     */\n    apiGitHubGet$Json(params, context) {\n      return this.apiGitHubGet$Json$Response(params, context).pipe(map(r => r.body));\n    }\n    /** Path part for operation `apiGitHubPost()` */\n\n    /**\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\n     * To access only the response body, use `apiGitHubPost$Plain()` instead.\n     *\n     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n     */\n    apiGitHubPost$Plain$Response(params, context) {\n      return apiGitHubPost$Plain(this.http, this.rootUrl, params, context);\n    }\n    /**\n     * This method provides access only to the response body.\n     * To access the full response (for headers, for example), `apiGitHubPost$Plain$Response()` instead.\n     *\n     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n     */\n    apiGitHubPost$Plain(params, context) {\n      return this.apiGitHubPost$Plain$Response(params, context).pipe(map(r => r.body));\n    }\n    /**\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\n     * To access only the response body, use `apiGitHubPost$Json()` instead.\n     *\n     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n     */\n    apiGitHubPost$Json$Response(params, context) {\n      return apiGitHubPost$Json(this.http, this.rootUrl, params, context);\n    }\n    /**\n     * This method provides access only to the response body.\n     * To access the full response (for headers, for example), `apiGitHubPost$Json$Response()` instead.\n     *\n     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n     */\n    apiGitHubPost$Json(params, context) {\n      return this.apiGitHubPost$Json$Response(params, context).pipe(map(r => r.body));\n    }\n    /** Path part for operation `apiGitHubDelete()` */\n\n    /**\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\n     * To access only the response body, use `apiGitHubDelete()` instead.\n     *\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\n     */\n    apiGitHubDelete$Response(params, context) {\n      return apiGitHubDelete(this.http, this.rootUrl, params, context);\n    }\n    /**\n     * This method provides access only to the response body.\n     * To access the full response (for headers, for example), `apiGitHubDelete$Response()` instead.\n     *\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\n     */\n    apiGitHubDelete(params, context) {\n      return this.apiGitHubDelete$Response(params, context).pipe(map(r => r.body));\n    }\n    /** Path part for operation `apiGitHubFilePathGet()` */\n\n    /**\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\n     * To access only the response body, use `apiGitHubFilePathGet()` instead.\n     *\n     * This method doesn't expect any request body.\n     */\n    apiGitHubFilePathGet$Response(params, context) {\n      return apiGitHubFilePathGet(this.http, this.rootUrl, params, context);\n    }\n    /**\n     * This method provides access only to the response body.\n     * To access the full response (for headers, for example), `apiGitHubFilePathGet$Response()` instead.\n     *\n     * This method doesn't expect any request body.\n     */\n    apiGitHubFilePathGet(params, context) {\n      return this.apiGitHubFilePathGet$Response(params, context).pipe(map(r => r.body));\n    }\n  }\n  _class = GitHubService;\n  _class.ApiGitHubTestGetPath = '/api/GitHub/Test';\n  _class.ApiGitHubGetPath = '/api/GitHub';\n  _class.ApiGitHubPostPath = '/api/GitHub';\n  _class.ApiGitHubDeletePath = '/api/GitHub';\n  _class.ApiGitHubFilePathGetPath = '/api/GitHub/{filePath}';\n  _class.ɵfac = function GitHubService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return GitHubService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
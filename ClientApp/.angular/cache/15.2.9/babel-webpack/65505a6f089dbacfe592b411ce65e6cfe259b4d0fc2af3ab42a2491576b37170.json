{"ast":null,"code":"import { inject } from '@angular/core';\nimport { GitHubService } from './api/services';\nimport { ConfirmationService, MessageService } from 'primeng/api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"primeng/treetable\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"primeng/button\";\nimport * as i5 from \"primeng/fileupload\";\nimport * as i6 from \"primeng/toast\";\nimport * as i7 from \"primeng/confirmpopup\";\nfunction AppComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"p-fileUpload\", 6, 7);\n    i0.ɵɵlistener(\"uploadHandler\", function AppComponent_ng_template_2_Template_p_fileUpload_uploadHandler_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const _r3 = i0.ɵɵreference(2);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.uploadFile($event, _r3));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"maxFileSize\", 100000000)(\"customUpload\", true)(\"auto\", true);\n  }\n}\nfunction AppComponent_ng_template_3_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const col_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", col_r8.header, \" \");\n  }\n}\nfunction AppComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, AppComponent_ng_template_3_th_1_Template, 2, 1, \"th\", 8);\n    i0.ɵɵelement(2, \"th\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const columns_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", columns_r6);\n  }\n}\nfunction AppComponent_ng_template_4_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵelement(1, \"p-treeTableToggler\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const col_r15 = ctx.$implicit;\n    const ctx_r17 = i0.ɵɵnextContext();\n    const rowNode_r9 = ctx_r17.$implicit;\n    const rowData_r10 = ctx_r17.rowData;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"rowNode\", rowNode_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", rowData_r10[col_r15.field], \" \");\n  }\n}\nfunction AppComponent_ng_template_4_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function AppComponent_ng_template_4_button_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const rowData_r10 = i0.ɵɵnextContext().rowData;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.downloadFile(rowData_r10));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_ng_template_4_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function AppComponent_ng_template_4_button_7_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const rowNode_r9 = i0.ɵɵnextContext().$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.onDleteClick($event, rowNode_r9));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, AppComponent_ng_template_4_td_1_Template, 3, 2, \"td\", 8);\n    i0.ɵɵelementStart(2, \"td\")(3, \"div\", 9)(4, \"div\", 10);\n    i0.ɵɵtemplate(5, AppComponent_ng_template_4_button_5_Template, 1, 0, \"button\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\");\n    i0.ɵɵtemplate(7, AppComponent_ng_template_4_button_7_Template, 1, 0, \"button\", 12);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const rowData_r10 = ctx.rowData;\n    const columns_r11 = ctx.columns;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", columns_r11);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", rowData_r10.type == \"file\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", rowData_r10.type == \"file\");\n  }\n}\nconst _c0 = function () {\n  return {\n    \"min-width\": \"50rem\"\n  };\n};\nexport let AppComponent = /*#__PURE__*/(() => {\n  var _class;\n  class AppComponent {\n    constructor() {\n      this.contentTree = [];\n      this.loading = false;\n      this.CONTENT_COLUMN = [{\n        field: 'name',\n        header: 'Name'\n      }\n      // { field: 'path', header: 'Path' },\n      // { field: 'size', header: 'Size' },\n      // { field: 'type', header: 'Type' },\n      ];\n\n      this.gitHubService = inject(GitHubService);\n      this.messageService = inject(MessageService);\n      this.confirmationService = inject(ConfirmationService);\n    }\n    ngOnInit() {\n      this.gitHubService.apiGitHubGet$Json().subscribe({\n        next: data => {\n          data.sort((a, b) => a.contentType.value > b.contentType.value ? -1 : 1);\n          this.contentTree = this.contentListToTreeNodeList(data);\n        }\n      });\n    }\n    downloadFile(content) {\n      window.open('/api/GitHub/' + content.name);\n    }\n    uploadFile(event, fileUpload) {\n      console.log(event);\n      this.loading = true;\n      this.gitHubService.apiGitHubPost$Json({\n        body: {\n          file: event.files[0]\n        }\n      }).subscribe({\n        next: value => {\n          let findNode = this.contentTree.filter(f => {\n            return f.data.name + '.txt' == value.name;\n          });\n          if (findNode.length == 0) {\n            this.contentTree = [...this.contentTree, this.contentToTreeNode(value)];\n          }\n          fileUpload.clear();\n          this.loading = false;\n        },\n        error: () => {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Error',\n            detail: 'Upload fail.'\n          });\n          fileUpload.clear();\n          this.loading = false;\n        }\n      });\n    }\n    onDleteClick(event, treeNode) {\n      this.confirmationService.confirm({\n        target: event.target,\n        message: 'Are you sure that you want to delete?',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.deleteFile(treeNode);\n        }\n      });\n    }\n    deleteFile(treeNode) {\n      this.loading = true;\n      console.log(treeNode);\n      this.gitHubService.apiGitHubDelete({\n        body: treeNode.node.data\n      }).subscribe({\n        next: () => {\n          this.contentTree = this.contentTree.filter(f => {\n            return f != treeNode.node;\n          });\n          this.loading = false;\n        },\n        error: () => {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Error',\n            detail: 'Delete fail.'\n          });\n          this.loading = false;\n        }\n      });\n    }\n    contentListToTreeNodeList(contentList) {\n      let treeNodeList = [];\n      for (let content of contentList) {\n        treeNodeList.push(this.contentToTreeNode(content));\n      }\n      return treeNodeList;\n    }\n    contentToTreeNode(content) {\n      let contentChildren = [];\n      if (content.child !== null && content.child.length > 0) {\n        for (let c of content.child) {\n          contentChildren.push(this.contentToTreeNode(c));\n        }\n      }\n      return {\n        data: {\n          name: content.contentType?.value == 1 ? content.name : content.name?.substring(0, content.name.length - 4),\n          path: content.path,\n          sha: content.sha,\n          type: content.contentType?.stringValue\n        },\n        children: contentChildren\n      };\n    }\n  }\n  _class = AppComponent;\n  _class.ɵfac = function AppComponent_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-root\"]],\n    decls: 7,\n    vars: 8,\n    consts: [[1, \"card\"], [\"scrollHeight\", \"500px\", 3, \"value\", \"columns\", \"paginator\", \"rows\", \"scrollable\", \"tableStyle\", \"loading\"], [\"pTemplate\", \"caption\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [1, \"flex\", \"align-items-center\", \"justify-content-between\"], [\"mode\", \"basic\", \"chooseLabel\", \"Browse\", 3, \"maxFileSize\", \"customUpload\", \"auto\", \"uploadHandler\"], [\"fileUpload\", \"\"], [4, \"ngFor\", \"ngForOf\"], [1, \"flex\", \"justify-content-end\", \"flex-wrap\"], [1, \"\"], [\"pButton\", \"\", \"icon\", \"pi pi-download\", \"class\", \"mr-1\", 3, \"click\", 4, \"ngIf\"], [\"pButton\", \"\", \"icon\", \"pi pi-trash\", \"class\", \"mr-1 p-button-danger\", 3, \"click\", 4, \"ngIf\"], [3, \"rowNode\"], [\"pButton\", \"\", \"icon\", \"pi pi-download\", 1, \"mr-1\", 3, \"click\"], [\"pButton\", \"\", \"icon\", \"pi pi-trash\", 1, \"mr-1\", \"p-button-danger\", 3, \"click\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-treeTable\", 1);\n        i0.ɵɵtemplate(2, AppComponent_ng_template_2_Template, 3, 3, \"ng-template\", 2);\n        i0.ɵɵtemplate(3, AppComponent_ng_template_3_Template, 3, 1, \"ng-template\", 3);\n        i0.ɵɵtemplate(4, AppComponent_ng_template_4_Template, 8, 3, \"ng-template\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(5, \"p-toast\")(6, \"p-confirmPopup\");\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.contentTree)(\"columns\", ctx.CONTENT_COLUMN)(\"paginator\", true)(\"rows\", 10)(\"scrollable\", true)(\"tableStyle\", i0.ɵɵpureFunction0(7, _c0))(\"loading\", ctx.loading);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.TreeTable, i3.PrimeTemplate, i2.TreeTableToggler, i4.ButtonDirective, i5.FileUpload, i6.Toast, i7.ConfirmPopup]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}